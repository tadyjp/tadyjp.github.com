<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Oh! my tady]]></title>
  <link href="http://blog.tady.jp/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.tady.jp/"/>
  <updated>2013-08-29T08:56:51+09:00</updated>
  <id>http://blog.tady.jp/</id>
  <author>
    <name><![CDATA[tady]]></name>
    <email><![CDATA[a.dat.jp@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[elasticsearch入門 1 (連載予定)]]></title>
    <link href="http://blog.tady.jp/posts/2013/08/29/elasticsearch-1"/>
    <updated>2013-08-29T08:36:00+09:00</updated>
    <id>http://blog.tady.jp/posts/2013/08/29/elasticsearch-1</id>
    <content type="html"><![CDATA[<h2>この記事は、</h2>

<p>2013年夏現在、私の開発している「<a href="http://ryokou-ex.jp">旅行EX</a>」というサービスでは<a href="http://www.elasticsearch.org/">elasticsearch</a>を検索エンジンとして利用しています。
開発が軌道に乗りはじめ、elasticsearchのノウハウが段々と溜まってきたので、「elasticsearch入門」向けの記事としてまとめようと思います。</p>

<h2>elasticsearchを使い始めたきっかけ</h2>

<p>旅行EXでは、
* rails4 (ruby2)
* mongoDB
* elasticsearch
という構成で動いています。
弊社では、もともとSolrを検索エンジンとして使う文化・ノウハウがあったのですが、
自分の所属する新規事業グループでは、日々新しい技術の実際的利用による吸収が期待されているので、
Solrの対抗馬とされているelasticsearchを使うことになりました。</p>

<h2>elasticsearchとSolrの比較</h2>

<p>実際のところできること、出来ないことは双方にあるのですが、
elasticsearchに無くてSolrにあったらいいと思う機能は</p>

<ul>
<li><a href="http://d.hatena.ne.jp/shinobu_aoki/20111019/1319049699">Result Grouping</a></li>
</ul>


<p>くらいでしょうか。</p>

<h2>基本的なデータ型</h2>

<p>elasticsearchは <code>Core type</code> として以下の型が備わっています。
* Stginr型
* Number型
* Date型
* Boolean型
* Binary型</p>

<h2>参考</h2>

<ul>
<li><a href="http://wadap.hatenablog.com/entry/20121228/1356688302">elasticsearchでらくらく全文検索</a>
*</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText2でGuardfileなどに色を付ける - Colorize unregistered format file like 'Guardfile' in SublimeText]]></title>
    <link href="http://blog.tady.jp/posts/2013/08/17/sublimetext2-guardfile-format"/>
    <updated>2013-08-17T15:10:00+09:00</updated>
    <id>http://blog.tady.jp/posts/2013/08/17/sublimetext2-guardfile-format</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/130817-guard/4.png" alt="4" /></p>

<h1>この記事の対象 &ndash; Target of this post.</h1>

<ul>
<li>SublimeText2でRails開発をしている人</li>
<li>Developer of Rails with SublimeText2</li>
</ul>


<h1>目安時間 &ndash; Estimated Time to execute written in this post</h1>

<ul>
<li>0.5 minutes</li>
</ul>


<h1>方法 &ndash; The how.</h1>

<p>SublimeTextはデフォルトではGuardfileなど見慣れない(拡張子が登録されていない)ファイルに色を付けてくれない</p>

<p>その時は、SublimeTextの右下の「PlainText」という箇所から、</p>

<p><code>PlainText -&gt; Open all with current extension as... -&gt; Ruby</code></p>

<p>と選択。
これで、次からはGuardfileがRuby形式で開かれる。</p>

<p><img src="/images/posts/130817-guard/2.png" alt="2" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh-agentを使って公開鍵認証無しにcapistranoでgithubからdeployする]]></title>
    <link href="http://blog.tady.jp/posts/2013/06/29/capistrano-plus-github-plus-ssh-agent"/>
    <updated>2013-06-29T18:00:00+09:00</updated>
    <id>http://blog.tady.jp/posts/2013/06/29/capistrano-plus-github-plus-ssh-agent</id>
    <content type="html"><![CDATA[<h1>この記事の対象</h1>

<ul>
<li>railsプロジェクトをcapistranoでdeployしている人</li>
<li>deploy対象のコードがgithubのprivateレポジトリで運用されている人</li>
<li>chef-soloを使ってサーバ運用している人</li>
</ul>


<h1>chef-soloの導入</h1>

<p>最近社内に導入された <code>chef-solo</code> によってappサーバの冗長化が簡単になりました。
サーバ毎に異なる設定も <code>role</code> や <code>attributes</code> などの仕組みを使うことで簡単に扱うことが出来ます。
しかし、ひとつぶち当たった壁が、 <strong>sshの鍵をどうしようか</strong>という点でした。</p>

<h1>githubからの直接deploy</h1>

<p>あるサービスでは、アプリケーションコードをgithubのprivateレポジトリで運用しています。
githubは自身の公開鍵をweb上から登録することでパスフレーズなしにgitへのアクセスができます。</p>

<p>ここで起こった問題が、
<code>
githubの鍵をすべてのサーバで作るのめんどくせ o ○(´・ω・`)
</code></p>

<h1>ssh agent forwardingというトリック</h1>

<p><a href="https://help.github.com/articles/using-ssh-agent-forwarding">https://help.github.com/articles/using-ssh-agent-forwarding</a></p>

<p>よく調べてみると、githubのドキュメントに<code>ssh agent forwarding</code>という項目がありました。
こんなめんどくさいことがcapistranoやgithubで対応されていないはずがありません。</p>

<p>なにやら、この<code>ssh agent forwarding</code>を使うと、ローカル(手元の開発機)の秘密鍵をリモート(本番機)でも使えるようになるらしいです。</p>

<h1>設定</h1>

<h2>1. [ローカル] ssh configの設定</h2>

<p>ローカルの<code>~/.ssh/config</code>で本番機へのssh設定に<code>ForwardAgent</code>設定を加えます。</p>

<p>```</p>

<h1>~/.ssh/config</h1>

<p>Host server.example.com
  &hellip;
  ForwardAgent yes
```</p>

<h2>2. [ローカル] ssh-agent機能を設定</h2>

<p><code>ssh agent</code>が動くために<code>ssh-add</code>を実行します。</p>

<p><code>
ssh-add ~/.ssh/id_rsa
</code></p>

<p><code>ssh-add -L</code>を実行して鍵が表示されれば成功です</p>

<p><code>
$&gt; ssh-add -L
ssh-rsa AFEVB3Nd4C1......
</code></p>

<h2>3. [リモート] ssh-agent機能を確認</h2>

<p>この状態でリモートに対してsshをつなぐと、その接続で<code>ssh agent forwarding</code>が動いています。</p>

<p>確認してみましょう。</p>

<p>```
ssh server.example.com</p>

<p>~~~~
ssh -T <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;</a>
Hi &lt;githubのユーザー名>! You&rsquo;ve successfully authenticated, but GitHub does not provide shell access.
```</p>

<p>なんということでしょう！秘密鍵が無いはずのリモートでgithubへのsshが通っています！</p>

<p>これでリモートでgithubからコードを落とすことが出来ます。</p>

<h2>4. capistranoで<code>ssh agent</code>を使う</h2>

<p>ここまで来ると後はcapistrano(内部的にsshを利用している)でも<code>ssh agent</code>を有効にするだけです。</p>

<p>```</p>

<h1>config/deploy.rb</h1>

<p>set :ssh_options, :forward_agent => true
set :repository, &ldquo;git@github.com:xxxxxxxxxx.git&rdquo;
set :deploy_via, :remote_cache
set :git_shallow_clone, 1
```</p>

<p>これで<code>cap deploy</code>でgithubからdeployできます。</p>

<p>以上です。</p>
]]></content>
  </entry>
  
</feed>
